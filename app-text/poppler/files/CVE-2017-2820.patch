Description: fix integer overflow in JPXStream::readTilePart
Author: Marc Deslauriers <marc.deslauriers@canonical.com>
Forwarded: no, internal JPX handler is unmaintained

Index: poppler-0.48.0/poppler/JPXStream.cc
===================================================================
--- poppler-0.48.0.orig/poppler/JPXStream.cc	2017-07-06 08:51:53.660317300 -0400
+++ poppler-0.48.0/poppler/JPXStream.cc	2017-07-06 08:51:53.660317300 -0400
@@ -186,6 +186,9 @@ static const Guint signContext[5][5][2]
 // ceil(x / 2^y)
 #define jpxCeilDivPow2(x, y) (((x) + (1 << (y)) - 1) >> (y))
 
+// check for overflow
+#define jpxSubMin(x, y) (((x) >= (y)) ? ((x) - (y)) : 0)
+
 //------------------------------------------------------------------------
 
 #if 1 //----- disable coverage tracking
@@ -1973,18 +1976,18 @@ GBool JPXStream::readTilePart() {
 	  resLevel->bx1[0] = resLevel->x1;
 	  resLevel->by1[0] = resLevel->y1;
 	} else {
-	  resLevel->bx0[0] = jpxCeilDivPow2(tileComp->x0 - (1 << (k-1)), k);
+	  resLevel->bx0[0] = jpxCeilDivPow2(jpxSubMin(tileComp->x0, (1 << (k-1))), k);
 	  resLevel->by0[0] = resLevel->y0;
-	  resLevel->bx1[0] = jpxCeilDivPow2(tileComp->x1 - (1 << (k-1)), k);
+	  resLevel->bx1[0] = jpxCeilDivPow2(jpxSubMin(tileComp->x1, (1 << (k-1))), k);
 	  resLevel->by1[0] = resLevel->y1;
 	  resLevel->bx0[1] = resLevel->x0;
-	  resLevel->by0[1] = jpxCeilDivPow2(tileComp->y0 - (1 << (k-1)), k);
+	  resLevel->by0[1] = jpxCeilDivPow2(jpxSubMin(tileComp->y0, (1 << (k-1))), k);
 	  resLevel->bx1[1] = resLevel->x1;
-	  resLevel->by1[1] = jpxCeilDivPow2(tileComp->y1 - (1 << (k-1)), k);
-	  resLevel->bx0[2] = jpxCeilDivPow2(tileComp->x0 - (1 << (k-1)), k);
-	  resLevel->by0[2] = jpxCeilDivPow2(tileComp->y0 - (1 << (k-1)), k);
-	  resLevel->bx1[2] = jpxCeilDivPow2(tileComp->x1 - (1 << (k-1)), k);
-	  resLevel->by1[2] = jpxCeilDivPow2(tileComp->y1 - (1 << (k-1)), k);
+	  resLevel->by1[1] = jpxCeilDivPow2(jpxSubMin(tileComp->y1, (1 << (k-1))), k);
+	  resLevel->bx0[2] = jpxCeilDivPow2(jpxSubMin(tileComp->x0, (1 << (k-1))), k);
+	  resLevel->by0[2] = jpxCeilDivPow2(jpxSubMin(tileComp->y0, (1 << (k-1))), k);
+	  resLevel->bx1[2] = jpxCeilDivPow2(jpxSubMin(tileComp->x1, (1 << (k-1))), k);
+	  resLevel->by1[2] = jpxCeilDivPow2(jpxSubMin(tileComp->y1, (1 << (k-1))), k);
 	}
 	resLevel->precincts = (JPXPrecinct *)gmallocn(1, sizeof(JPXPrecinct));
 	for (pre = 0; pre < 1; ++pre) {
